{
  "name": "jshashes",
  "description": "A hash algorithm independent library purely JavaScript implemented for both server and client side",
  "tags": [
    "hash",
    "md5",
    "sha1",
    "sha256",
    "hashes",
    "sha512",
    "RIPEMD160",
    "checksum",
    "base64",
    "crc",
    "encoding",
    "algorithm",
    "library"
  ],
  "version": "0.1.4b",
  "author": {
    "name": "Tomas Aparicio",
    "email": "tomas@rijndael-project.com"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/h2non/jsHashes.git"
  },
  "homepage": "https://github.com/h2non/jsHashes",
  "dependencies": {},
  "bugs": {
    "url": "http://github.com/h2non/jsHashes/issues"
  },
  "engines": {
    "node": "*"
  },
  "main": "./server/lib/hashes",
  "licenses": [
    {
      "type": "New BSD",
      "url": "http://github.com/h2non/jsHashes/raw/master/LICENSE"
    }
  ],
  "readme": "# jsHashes \r\n`A hash algorithm independent library purely JavaScript implemented for both server and client side`\r\n\r\n# About\r\n\r\n`jsHashes` is a pure JavaScript implementation of the most extended hash algorithms.\r\nIts goal is to provide an independent, fast and easy solution for hash algorithms both for client-side and server-side JavaScript environments.\r\nThe code is fully compatible with the ECMAScript language specification and was tested in all major browsers (client-side) and node.js all versions (server-side).   \r\n\r\n## Supported hash algorithms\r\n\r\n* `MD5` (<http://www.ietf.org/rfc/rfc1321.txt>)\r\n* `SHA1` (<http://www.itl.nist.gov/fipspubs/fip180-1.htm>)\r\n* `SHA256` (<http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf>)\r\n* `SHA512` (<http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf>)\r\n* `HMAC` (<http://www.ietf.org/rfc/rfc2104.txt>)\r\n* `RIPEMD-160` (<http://homes.esat.kuleuven.be/~bosselae/ripemd160.html>)\r\n\r\n**Aditional functionalities**\r\n\r\n* `Base64 encode/decode` (<http://tools.ietf.org/html/rfc3548>)\r\n* `CRC-32 calculation`\r\n* `URL encode/decode`\r\n* `UTF-8 encode/decode`\r\n\r\n## Usage\r\nFollowing some software design patterns, `jsHashes` implements an object-oriented paradigm for an easy and clean use. \r\nEach algorithm has its respective own `class`, providing encapsulation (public and private methods) and independence from other classes.   \r\n\r\nAll the `classes` are defined inside the Object called `Hashes` (like namespace). \r\n\r\nHere you can see an example of how to create a new instance for each algorithm:\r\n\r\n```javascript\r\n// new MD5 instance\r\nvar MD5 = new Hashes.MD5;\r\n// new SHA1 instance\r\nvar SHA1 = new Hashes.SHA1;\r\n// new SHA256 instance\r\nvar SHA256 =  new Hashes.SHA256;\r\n// new SHA512 instace\r\nvar SHA512 = new Hashes.SHA512;\r\n// new RIPEMD-160 instace\r\nvar RMD160 = new Hashes.RMD160; \r\n```\r\n\r\nNow, an example of how to output an hexadecimal-based hash encoding for each algorithm (client-side):\r\n\r\n```javascript\r\n// sample string\r\nvar str = 'Sample text!';\r\n// output into DOM\r\ndocument.write('<p>MD5: <b>' + MD5.hex(str) + '</b></p>');\r\ndocument.write('<p>SHA1: <b>' + SHA1.hex(str) + '</b></p>');\r\ndocument.write('<p>SHA256: <b>' + SHA256.hex(str) + '</b></p>');\r\ndocument.write('<p>SHA512: <b>' + SHA512.hex(str) + '</b></p>');\r\ndocument.write('<p>RIPEMD-160: <b>' + RMD160.hex(str) + '</b></p>');\r\n```\r\n\r\n### Client-Side\r\nThis is a simple implementation for client-side environment:\r\n\r\n```html\r\n<html>\r\n<head>\r\n<script type=\"application/javascript\" src=\"src/hashes.js\"></script>\r\n<script type=\"application/javascript\">\r\n// sample string \r\nvar str = 'This is a sample text!';\r\n// new MD5 instance and hexadecimal string encoding\r\nvar MD5 = new Hashes.MD5().hex(str);\r\n// output into DOM\r\ndocument.write('<p>MD5: <b>' + MD5 + '</b></p>');\r\n</script>\r\n</head>\r\n<body>\r\n</body>\r\n</html>\r\n```\r\n\r\n### Server-Side\r\nThe server-side was implemented by default for node.js (V8 chrome engine) <http://nodejs.org>.\r\n\r\n`jsHashes` is available via NPM. You can install it simply doing:\r\n\r\n```\r\n$ npm install jshashes\r\n```\r\n\r\nYou can use it like module. Here a simple example:\r\n\r\n```javascript\r\n#!/usr/bin/env node\r\n// require the module and use the Hash object\r\n// suppossing you install via NPM and is located at node/lib/node_modules/\r\nvar Hashes = require('jshashes/server/lib/hashes');\r\n// sample string\r\nvar str = 'This is a sample text!';\r\n// new SHA1 instance and base64 string encoding\r\nvar SHA1 = new Hashes.SHA1().b64(str);\r\n// output to console\r\nconsole.log('SHA1: ' + SHA1);\r\n```\r\n\r\n## Public methods\r\nEach algorithm `class` provides the following public methods:\r\n\r\n* `hex(string)` - Hexadecimal hash encoding from string. \r\n* `b64(string)` - Base64 hash encondig from string.\r\n* `any(string,encoding)` - Custom hash algorithm values encoding.\r\n* `hex_hmac(string,key)` - Hexadecimal hash with HMAC salt key.\r\n* `b64_hmac(string,key)` - Base64 hash with HMAC salt key.\r\n* `any_hmac(string,key,encoding)` - Custom hash values encoding with HMAC salt key support.\r\n* `vm_test()` - Simple self-test to see is working. Returns `this` Object.\r\n* `setUpperCase(boolean)` - Enable/disable uppercase hexadecimal returned string. Returns `this` Object. \r\n* `setPad(string)` - Defines a custom base64 pad string. Default is '=' according with the RFC standard. Returns `this` Object.\r\n* `setUTF8(boolean)` - Enable/disable UTF-8 character encoding. Returns `this` Object.\r\n\r\n## Hash encoding formats supported\r\n\r\n* Hexadecimal (most extended)\r\n* Base64\r\n* Custom hash values `any()` method\r\n\r\nAll include HMAC and UTF-8 support.\r\n\r\n## Benchmark\r\n\r\nNode.js 0.6.18 running on a VPS Intel I7 930 with 512 MB of RAM (see `server/benchmark.js`) \r\n\r\n```javascript\r\nSimple benchmark test generating 10000 hashes for each algorithm.\r\nString: \"A0gTtNtKh3RaduBfIo59ZdfTc5pTdOQrkxdZ5EeVOIZh1cXxqPyexKZBg6VlE1KzIz6pd6r1LLIpT5B8THRfcGvbJElwhWBi9ZAE\"\r\n\r\n* MD5\r\n** Done in: 205 miliseconds\r\n* SHA1\r\n** Done in: 277 miliseconds\r\n* SHA256\r\n** Done in: 525 miliseconds\r\n* SHA512\r\n** Done in: 593 miliseconds\r\n* RMD160\r\n** Done in: 383 miliseconds\r\n```\r\n\r\nSee `client/benchmark.html` for client-side.\r\n\r\n## Notes\r\n\r\n* Don't support checksum hash for files on the server-side, only text-based inputs are supported.\r\n* It has not been planned to include support for more hash algorithms (maybe some in experimental version).\r\n* The goal is to provide the same JavaScript code in both server and client side, so it isn't planned to improve it in other ways. \r\n* Only Node.js server-side was tested, so with minimal changes, you can setup `jsHashes` in other server-side JS environment.\r\n\r\n## Changelog\r\n\r\n### Beta\r\n* `0.1.4b`\r\n  - Now declaring objects using Literal Notation.\r\n  - Solved sintax errors on minimized version (jshashes.min.js)\r\n  - Added benchmark test and sample\r\n* `0.1.3b`\r\n  - Starting non-redundancy code refactorization\r\n  - Added `Helpers` Object with some global functions\r\n  - Added native support for Base64 provided as `class`\r\n  - Added CRC-32 calculation support\r\n  - Added URL encode/decode helpers functions \r\n* `0.1.2b` \r\n  - SHA1 error fixed. \r\n  - General code changes (renaming classes, private methods, new methods...). \r\n  - Changing library namespace to 'Hashes'. \r\n  - Starting code documentation. \r\n  - Added new examples of how to use. \r\n* `0.1.1b` \r\n  - Minimal library improvements. \r\n  - There has been added some samples, like how to use it and support for NPM package.\r\n* `0.1.0b` \r\n  - First release: the code is stable, but the library is still beta and must be improved and documented.\r\n  \r\n## TODO list\r\n\r\n* Debugging and validation\r\n* Code refactoring\r\n* Remove redundancy and create a global functions\r\n* Implement new hash algorithms for experimental proposals (tiger, ripemd320, gost, adler32, haval...)\r\n* Improve and standarize code documentation\r\n* Benchmarking\r\n\r\n## Authors \r\n\r\n### Library author\r\n\r\n* Tomas Aparicio (<https://github.com/h2non/>)\r\n\r\n### Original algorithms implementation authors\r\n\r\n* Paul Johnston (<http://pajhome.org.uk/crypt/md5/>)\r\n* Angel Marin (SHA256)\r\n* Jeremy Lin (RIPEMD-160)\r\n\r\n### Other contributors\r\n\r\n* Greg Holt\r\n* Andrew Kepert\r\n* Ydnar\r\n* Lostinet\r\n\r\n## License\r\n\r\njsHashes is released under `New BSD` license. See `LICENSE` file.\r\n\r\n## Issues\r\n\r\nFeel free to report any issue you experiment via Github <https://github.com/h2non/jsHashes/issues>.\r\n\r\n",
  "_id": "jshashes@0.1.4b",
  "dist": {
    "shasum": "7548cf884026a84b6d94ecfda6f70dec235e8649"
  },
  "_from": "jshashes"
}
